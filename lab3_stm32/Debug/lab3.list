
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c50  08002c50  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002c50  08002c50  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c50  08002c50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000060  08002cb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002cb8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000904c  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3c  00000000  00000000  000290d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001693a  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adad  00000000  00000000  00042772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082314  00000000  00000000  0004d51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  000cf888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c08 	.word	0x08002c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002c08 	.word	0x08002c08

0800014c <isButtonPressed>:
int buttonlong_flag[NUM_OF_BUTTONS] = {0};

// Khoi tao cac bien dem chu ki de xac dinh hai su kien co the xay ra cua nut nhan
int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a6      	b.n	80002fa <getKeyInput+0x15a>
		KeyReg0[i] = KeyReg1[i];	// Xu li chong rung
 80001ac:	4a57      	ldr	r2, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4956      	ldr	r1, [pc, #344]	; (8000310 <getKeyInput+0x170>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a55      	ldr	r2, [pc, #340]	; (8000314 <getKeyInput+0x174>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4951      	ldr	r1, [pc, #324]	; (800030c <getKeyInput+0x16c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Doc cac tin hieu tu cac nut nhan
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80001d2:	2102      	movs	r1, #2
 80001d4:	4850      	ldr	r0, [pc, #320]	; (8000318 <getKeyInput+0x178>)
 80001d6:	f001 fcdf 	bl	8001b98 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a4d      	ldr	r2, [pc, #308]	; (8000314 <getKeyInput+0x174>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 80001ee:	2104      	movs	r1, #4
 80001f0:	4849      	ldr	r0, [pc, #292]	; (8000318 <getKeyInput+0x178>)
 80001f2:	f001 fcd1 	bl	8001b98 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a46      	ldr	r2, [pc, #280]	; (8000314 <getKeyInput+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			KeyReg2[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 800020a:	2108      	movs	r1, #8
 800020c:	4842      	ldr	r0, [pc, #264]	; (8000318 <getKeyInput+0x178>)
 800020e:	f001 fcc3 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x174>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		// Xu li tin hieu
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800021e:	4a3b      	ldr	r2, [pc, #236]	; (800030c <getKeyInput+0x16c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	493a      	ldr	r1, [pc, #232]	; (8000310 <getKeyInput+0x170>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d159      	bne.n	80002e6 <getKeyInput+0x146>
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x16c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x174>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d14f      	bne.n	80002e6 <getKeyInput+0x146>
			if (KeyReg3[i] != KeyReg2[i]){
 8000246:	4a35      	ldr	r2, [pc, #212]	; (800031c <getKeyInput+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x174>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d02b      	beq.n	80002b2 <getKeyInput+0x112>
				KeyReg3[i] = KeyReg2[i];
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x174>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492e      	ldr	r1, [pc, #184]	; (800031c <getKeyInput+0x17c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d13d      	bne.n	80002f2 <getKeyInput+0x152>
					subKeyProcess(i);	// Kich timer_flag[i] = 1;
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f7ff ff82 	bl	8000180 <subKeyProcess>
					if (buttonlong_flag[i] == 0) {
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <getKeyInput+0x180>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10a      	bne.n	800029e <getKeyInput+0xfe>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE; // Set thoi gian 2s (dieu kien cho su kien longkeyPress dien ra)
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <getKeyInput+0x184>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000290:	fb92 f2f3 	sdiv	r2, r2, r3
 8000294:	4924      	ldr	r1, [pc, #144]	; (8000328 <getKeyInput+0x188>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 800029c:	e029      	b.n	80002f2 <getKeyInput+0x152>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;  // Set thoi gian 0.25s (dieu kien cho nhung lan thay doi trang thai tiep theo)
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <getKeyInput+0x184>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	22fa      	movs	r2, #250	; 0xfa
 80002a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80002a8:	491f      	ldr	r1, [pc, #124]	; (8000328 <getKeyInput+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002b0:	e01f      	b.n	80002f2 <getKeyInput+0x152>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput+0x188>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <getKeyInput+0x188>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				// Neu sau khoang thoi gian TimeOutForKeyPress lan dau tien (2s) ma van con nhan giu button, thi buttonlong_flag[i] se bang 1, nguoc lai se bang 0
				if (TimeOutForKeyPress[i] == 0){
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <getKeyInput+0x188>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d110      	bne.n	80002f2 <getKeyInput+0x152>
					KeyReg3[i] = NORMAL_STATE;
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <getKeyInput+0x17c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonlong_flag[i] = 1;
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <getKeyInput+0x180>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002e4:	e005      	b.n	80002f2 <getKeyInput+0x152>
				}
			}
		}
		else {
			buttonlong_flag[i] = 0;
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput+0x180>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2100      	movs	r1, #0
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f0:	e000      	b.n	80002f4 <getKeyInput+0x154>
			if (KeyReg3[i] != KeyReg2[i]){
 80002f2:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af55 	ble.w	80001ac <getKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000000c 	.word	0x2000000c
 8000310:	20000000 	.word	0x20000000
 8000314:	20000018 	.word	0x20000018
 8000318:	40010800 	.word	0x40010800
 800031c:	20000024 	.word	0x20000024
 8000320:	20000088 	.word	0x20000088
 8000324:	20000110 	.word	0x20000110
 8000328:	20000094 	.word	0x20000094

0800032c <display7SEG>:
 *      Author: PC
 */

#include "display.h"

void display7SEG(int counter) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	/* Khoi tao mot day gom gia tri bit de hien thi cac chu so lan luot tu 0 toi 9 */
	unsigned char disp_arr[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};
 8000334:	4a30      	ldr	r2, [pc, #192]	; (80003f8 <display7SEG+0xcc>)
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	ca07      	ldmia	r2, {r0, r1, r2}
 800033c:	c303      	stmia	r3!, {r0, r1}
 800033e:	801a      	strh	r2, [r3, #0]
	/* Khoi tao bien "varr" chua gia tri bit 7 doan cua bien "counter" de hien thi con so can hien thi va bien "bit_var" */
	unsigned char bit_var, varr = disp_arr[counter];
 8000340:	f107 020c 	add.w	r2, r7, #12
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	75fb      	strb	r3, [r7, #23]

	/* Doi voi tung doan segment, bien bit_var se lay gia tri bit cua segment do de hien thi den (0 -> Sang, 1 -> Tat) */

	bit_var = varr & 0x01; /* Den SEG0 */
 800034c:	7dfb      	ldrb	r3, [r7, #23]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, bit_var);
 8000354:	7dbb      	ldrb	r3, [r7, #22]
 8000356:	461a      	mov	r2, r3
 8000358:	2101      	movs	r1, #1
 800035a:	4828      	ldr	r0, [pc, #160]	; (80003fc <display7SEG+0xd0>)
 800035c:	f001 fc33 	bl	8001bc6 <HAL_GPIO_WritePin>

	bit_var = (varr>>1) & 0x01; /* Den SEG1 */
 8000360:	7dfb      	ldrb	r3, [r7, #23]
 8000362:	085b      	lsrs	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, bit_var);
 800036c:	7dbb      	ldrb	r3, [r7, #22]
 800036e:	461a      	mov	r2, r3
 8000370:	2102      	movs	r1, #2
 8000372:	4822      	ldr	r0, [pc, #136]	; (80003fc <display7SEG+0xd0>)
 8000374:	f001 fc27 	bl	8001bc6 <HAL_GPIO_WritePin>

	bit_var = (varr>>2) & 0x01; /* Den SEG2 */
 8000378:	7dfb      	ldrb	r3, [r7, #23]
 800037a:	089b      	lsrs	r3, r3, #2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, bit_var);
 8000384:	7dbb      	ldrb	r3, [r7, #22]
 8000386:	461a      	mov	r2, r3
 8000388:	2104      	movs	r1, #4
 800038a:	481c      	ldr	r0, [pc, #112]	; (80003fc <display7SEG+0xd0>)
 800038c:	f001 fc1b 	bl	8001bc6 <HAL_GPIO_WritePin>

	bit_var = (varr>>3) & 0x01; /* Den SEG3 */
 8000390:	7dfb      	ldrb	r3, [r7, #23]
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	b2db      	uxtb	r3, r3
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, bit_var);
 800039c:	7dbb      	ldrb	r3, [r7, #22]
 800039e:	461a      	mov	r2, r3
 80003a0:	2108      	movs	r1, #8
 80003a2:	4816      	ldr	r0, [pc, #88]	; (80003fc <display7SEG+0xd0>)
 80003a4:	f001 fc0f 	bl	8001bc6 <HAL_GPIO_WritePin>

	bit_var = (varr>>4) & 0x01; /* Den SEG4 */
 80003a8:	7dfb      	ldrb	r3, [r7, #23]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, bit_var);
 80003b4:	7dbb      	ldrb	r3, [r7, #22]
 80003b6:	461a      	mov	r2, r3
 80003b8:	2110      	movs	r1, #16
 80003ba:	4810      	ldr	r0, [pc, #64]	; (80003fc <display7SEG+0xd0>)
 80003bc:	f001 fc03 	bl	8001bc6 <HAL_GPIO_WritePin>

	bit_var = (varr>>5) & 0x01; /* Den SEG5 */
 80003c0:	7dfb      	ldrb	r3, [r7, #23]
 80003c2:	095b      	lsrs	r3, r3, #5
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, bit_var);
 80003cc:	7dbb      	ldrb	r3, [r7, #22]
 80003ce:	461a      	mov	r2, r3
 80003d0:	2120      	movs	r1, #32
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <display7SEG+0xd0>)
 80003d4:	f001 fbf7 	bl	8001bc6 <HAL_GPIO_WritePin>

	bit_var = (varr>>6) & 0x01; /* Den SEG6 */
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
 80003da:	099b      	lsrs	r3, r3, #6
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, bit_var);
 80003e4:	7dbb      	ldrb	r3, [r7, #22]
 80003e6:	461a      	mov	r2, r3
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <display7SEG+0xd0>)
 80003ec:	f001 fbeb 	bl	8001bc6 <HAL_GPIO_WritePin>
}
 80003f0:	bf00      	nop
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	08002c20 	.word	0x08002c20
 80003fc:	40010c00 	.word	0x40010c00

08000400 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1,2,3,4};
void update7SEG(int index){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	display7SEG(led_buffer[index]);
 8000408:	4a45      	ldr	r2, [pc, #276]	; (8000520 <update7SEG+0x120>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff8b 	bl	800032c <display7SEG>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d87b      	bhi.n	8000514 <update7SEG+0x114>
 800041c:	a201      	add	r2, pc, #4	; (adr r2, 8000424 <update7SEG+0x24>)
 800041e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000422:	bf00      	nop
 8000424:	08000435 	.word	0x08000435
 8000428:	0800046d 	.word	0x0800046d
 800042c:	080004a5 	.word	0x080004a5
 8000430:	080004dd 	.word	0x080004dd
	switch(index){
	case 0:
		// Display the second 7 SEG with led_buffer[0]
		index_led = 1;
 8000434:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <update7SEG+0x124>)
 8000436:	2201      	movs	r2, #1
 8000438:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000440:	4839      	ldr	r0, [pc, #228]	; (8000528 <update7SEG+0x128>)
 8000442:	f001 fbc0 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, SET);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800044c:	4836      	ldr	r0, [pc, #216]	; (8000528 <update7SEG+0x128>)
 800044e:	f001 fbba 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000458:	4833      	ldr	r0, [pc, #204]	; (8000528 <update7SEG+0x128>)
 800045a:	f001 fbb4 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000464:	4830      	ldr	r0, [pc, #192]	; (8000528 <update7SEG+0x128>)
 8000466:	f001 fbae 	bl	8001bc6 <HAL_GPIO_WritePin>
		break;
 800046a:	e054      	b.n	8000516 <update7SEG+0x116>
	case 1:
		// Display the second 7 SEG with led_buffer[1]
		index_led = 2;
 800046c:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <update7SEG+0x124>)
 800046e:	2202      	movs	r2, #2
 8000470:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	482b      	ldr	r0, [pc, #172]	; (8000528 <update7SEG+0x128>)
 800047a:	f001 fba4 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000484:	4828      	ldr	r0, [pc, #160]	; (8000528 <update7SEG+0x128>)
 8000486:	f001 fb9e 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000490:	4825      	ldr	r0, [pc, #148]	; (8000528 <update7SEG+0x128>)
 8000492:	f001 fb98 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	4822      	ldr	r0, [pc, #136]	; (8000528 <update7SEG+0x128>)
 800049e:	f001 fb92 	bl	8001bc6 <HAL_GPIO_WritePin>
		break;
 80004a2:	e038      	b.n	8000516 <update7SEG+0x116>
	case 2:
		// Display the third 7 SEG with led_buffer[2]
		index_led = 3;
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <update7SEG+0x124>)
 80004a6:	2203      	movs	r2, #3
 80004a8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <update7SEG+0x128>)
 80004b2:	f001 fb88 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	481a      	ldr	r0, [pc, #104]	; (8000528 <update7SEG+0x128>)
 80004be:	f001 fb82 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	4817      	ldr	r0, [pc, #92]	; (8000528 <update7SEG+0x128>)
 80004ca:	f001 fb7c 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	4814      	ldr	r0, [pc, #80]	; (8000528 <update7SEG+0x128>)
 80004d6:	f001 fb76 	bl	8001bc6 <HAL_GPIO_WritePin>
		break;
 80004da:	e01c      	b.n	8000516 <update7SEG+0x116>
	case 3:
		// Display the forth 7 SEG with led_buffer[3]
		index_led = 0;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <update7SEG+0x124>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <update7SEG+0x128>)
 80004ea:	f001 fb6c 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <update7SEG+0x128>)
 80004f6:	f001 fb66 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <update7SEG+0x128>)
 8000502:	f001 fb60 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <update7SEG+0x128>)
 800050e:	f001 fb5a 	bl	8001bc6 <HAL_GPIO_WritePin>
		break;
 8000512:	e000      	b.n	8000516 <update7SEG+0x116>
	default:
		break;
 8000514:	bf00      	nop
	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000030 	.word	0x20000030
 8000524:	200000a0 	.word	0x200000a0
 8000528:	40010800 	.word	0x40010800

0800052c <updateClockBufferMode1>:


int counterL = 1, counterP = 1;
void updateClockBufferMode1() {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	// Cap nhat gia tri thoi gian vao trong clockBuffer
	// Doi voi 2 LED 7-SEG Landscape

	/* Den RED-Landscape sang (dem nguoc tu RED-1 -> 0) */
	if (counterL <= RED) {
 8000530:	4b95      	ldr	r3, [pc, #596]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b95      	ldr	r3, [pc, #596]	; (800078c <updateClockBufferMode1+0x260>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dc1f      	bgt.n	800057c <updateClockBufferMode1+0x50>
		led_buffer[0] = (RED - counterL) / 10;
 800053c:	4b93      	ldr	r3, [pc, #588]	; (800078c <updateClockBufferMode1+0x260>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b91      	ldr	r3, [pc, #580]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4a92      	ldr	r2, [pc, #584]	; (8000790 <updateClockBufferMode1+0x264>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1092      	asrs	r2, r2, #2
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	4a90      	ldr	r2, [pc, #576]	; (8000794 <updateClockBufferMode1+0x268>)
 8000554:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counterL) % 10;
 8000556:	4b8d      	ldr	r3, [pc, #564]	; (800078c <updateClockBufferMode1+0x260>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b8b      	ldr	r3, [pc, #556]	; (8000788 <updateClockBufferMode1+0x25c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1ad1      	subs	r1, r2, r3
 8000560:	4b8b      	ldr	r3, [pc, #556]	; (8000790 <updateClockBufferMode1+0x264>)
 8000562:	fb83 2301 	smull	r2, r3, r3, r1
 8000566:	109a      	asrs	r2, r3, #2
 8000568:	17cb      	asrs	r3, r1, #31
 800056a:	1ad2      	subs	r2, r2, r3
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	1aca      	subs	r2, r1, r3
 8000576:	4b87      	ldr	r3, [pc, #540]	; (8000794 <updateClockBufferMode1+0x268>)
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	e059      	b.n	8000630 <updateClockBufferMode1+0x104>
	}
	/* Den GREEN-Landscape sang (dem nguoc tu GREEN-1 -> 0) */
	else if (counterL <= (RED + GREEN)) {
 800057c:	4b83      	ldr	r3, [pc, #524]	; (800078c <updateClockBufferMode1+0x260>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b85      	ldr	r3, [pc, #532]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	441a      	add	r2, r3
 8000586:	4b80      	ldr	r3, [pc, #512]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	db25      	blt.n	80005da <updateClockBufferMode1+0xae>
		led_buffer[0] = (RED + GREEN - counterL) / 10;
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <updateClockBufferMode1+0x260>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b81      	ldr	r3, [pc, #516]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	441a      	add	r2, r3
 8000598:	4b7b      	ldr	r3, [pc, #492]	; (8000788 <updateClockBufferMode1+0x25c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	4a7c      	ldr	r2, [pc, #496]	; (8000790 <updateClockBufferMode1+0x264>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	1092      	asrs	r2, r2, #2
 80005a6:	17db      	asrs	r3, r3, #31
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4a7a      	ldr	r2, [pc, #488]	; (8000794 <updateClockBufferMode1+0x268>)
 80005ac:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counterL) % 10;
 80005ae:	4b77      	ldr	r3, [pc, #476]	; (800078c <updateClockBufferMode1+0x260>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b79      	ldr	r3, [pc, #484]	; (8000798 <updateClockBufferMode1+0x26c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	441a      	add	r2, r3
 80005b8:	4b73      	ldr	r3, [pc, #460]	; (8000788 <updateClockBufferMode1+0x25c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1ad1      	subs	r1, r2, r3
 80005be:	4b74      	ldr	r3, [pc, #464]	; (8000790 <updateClockBufferMode1+0x264>)
 80005c0:	fb83 2301 	smull	r2, r3, r3, r1
 80005c4:	109a      	asrs	r2, r3, #2
 80005c6:	17cb      	asrs	r3, r1, #31
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	4613      	mov	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	1aca      	subs	r2, r1, r3
 80005d4:	4b6f      	ldr	r3, [pc, #444]	; (8000794 <updateClockBufferMode1+0x268>)
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	e02a      	b.n	8000630 <updateClockBufferMode1+0x104>
	}
	/* Den AMBER-Landscape sang (dem nguoc tu AMBER-1 -> 0) */
	else {
		led_buffer[0] = (RED + GREEN + AMBER - counterL) / 10;
 80005da:	4b6c      	ldr	r3, [pc, #432]	; (800078c <updateClockBufferMode1+0x260>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b6e      	ldr	r3, [pc, #440]	; (8000798 <updateClockBufferMode1+0x26c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	441a      	add	r2, r3
 80005e4:	4b6d      	ldr	r3, [pc, #436]	; (800079c <updateClockBufferMode1+0x270>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	441a      	add	r2, r3
 80005ea:	4b67      	ldr	r3, [pc, #412]	; (8000788 <updateClockBufferMode1+0x25c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	4a67      	ldr	r2, [pc, #412]	; (8000790 <updateClockBufferMode1+0x264>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	1092      	asrs	r2, r2, #2
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	4a65      	ldr	r2, [pc, #404]	; (8000794 <updateClockBufferMode1+0x268>)
 80005fe:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counterL) % 10;
 8000600:	4b62      	ldr	r3, [pc, #392]	; (800078c <updateClockBufferMode1+0x260>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b64      	ldr	r3, [pc, #400]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	441a      	add	r2, r3
 800060a:	4b64      	ldr	r3, [pc, #400]	; (800079c <updateClockBufferMode1+0x270>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	441a      	add	r2, r3
 8000610:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	1ad1      	subs	r1, r2, r3
 8000616:	4b5e      	ldr	r3, [pc, #376]	; (8000790 <updateClockBufferMode1+0x264>)
 8000618:	fb83 2301 	smull	r2, r3, r3, r1
 800061c:	109a      	asrs	r2, r3, #2
 800061e:	17cb      	asrs	r3, r1, #31
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	1aca      	subs	r2, r1, r3
 800062c:	4b59      	ldr	r3, [pc, #356]	; (8000794 <updateClockBufferMode1+0x268>)
 800062e:	605a      	str	r2, [r3, #4]
	}
	counterL++;
 8000630:	4b55      	ldr	r3, [pc, #340]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	4a54      	ldr	r2, [pc, #336]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000638:	6013      	str	r3, [r2, #0]
	/* Neu thoi gian AMBER-Landscape ket thuc, quay tro lai setup thoi gian cho RED-Landscape sang lai */
	if (counterL > RED + AMBER + GREEN) counterL = 1;
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <updateClockBufferMode1+0x260>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <updateClockBufferMode1+0x270>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	441a      	add	r2, r3
 8000644:	4b54      	ldr	r3, [pc, #336]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	441a      	add	r2, r3
 800064a:	4b4f      	ldr	r3, [pc, #316]	; (8000788 <updateClockBufferMode1+0x25c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	da02      	bge.n	8000658 <updateClockBufferMode1+0x12c>
 8000652:	4b4d      	ldr	r3, [pc, #308]	; (8000788 <updateClockBufferMode1+0x25c>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]


	// Doi voi 2 LED 7-SEG Portrait
	/* Den GREEN-Portrait sang (dem nguoc tu GREEN-1 -> 0) */
	if (counterP <= GREEN) {
 8000658:	4b51      	ldr	r3, [pc, #324]	; (80007a0 <updateClockBufferMode1+0x274>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b4e      	ldr	r3, [pc, #312]	; (8000798 <updateClockBufferMode1+0x26c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	dc1f      	bgt.n	80006a4 <updateClockBufferMode1+0x178>
		led_buffer[2] = (GREEN - counterP) / 10;
 8000664:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <updateClockBufferMode1+0x274>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a48      	ldr	r2, [pc, #288]	; (8000790 <updateClockBufferMode1+0x264>)
 8000670:	fb82 1203 	smull	r1, r2, r2, r3
 8000674:	1092      	asrs	r2, r2, #2
 8000676:	17db      	asrs	r3, r3, #31
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	4a46      	ldr	r2, [pc, #280]	; (8000794 <updateClockBufferMode1+0x268>)
 800067c:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counterP) % 10;
 800067e:	4b46      	ldr	r3, [pc, #280]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <updateClockBufferMode1+0x274>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1ad1      	subs	r1, r2, r3
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <updateClockBufferMode1+0x264>)
 800068a:	fb83 2301 	smull	r2, r3, r3, r1
 800068e:	109a      	asrs	r2, r3, #2
 8000690:	17cb      	asrs	r3, r1, #31
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1aca      	subs	r2, r1, r3
 800069e:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <updateClockBufferMode1+0x268>)
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	e059      	b.n	8000758 <updateClockBufferMode1+0x22c>
	}
	/* Den AMBER-Portrait sang (dem nguoc tu AMBER-1 -> 0) */
	else if (counterP <= (AMBER + GREEN)) {
 80006a4:	4b3d      	ldr	r3, [pc, #244]	; (800079c <updateClockBufferMode1+0x270>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <updateClockBufferMode1+0x26c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	441a      	add	r2, r3
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <updateClockBufferMode1+0x274>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	db25      	blt.n	8000702 <updateClockBufferMode1+0x1d6>
		led_buffer[2] = (AMBER + GREEN - counterP) / 10;
 80006b6:	4b39      	ldr	r3, [pc, #228]	; (800079c <updateClockBufferMode1+0x270>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <updateClockBufferMode1+0x26c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	441a      	add	r2, r3
 80006c0:	4b37      	ldr	r3, [pc, #220]	; (80007a0 <updateClockBufferMode1+0x274>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	4a32      	ldr	r2, [pc, #200]	; (8000790 <updateClockBufferMode1+0x264>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1092      	asrs	r2, r2, #2
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	4a30      	ldr	r2, [pc, #192]	; (8000794 <updateClockBufferMode1+0x268>)
 80006d4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counterP) % 10;
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <updateClockBufferMode1+0x270>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <updateClockBufferMode1+0x26c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	441a      	add	r2, r3
 80006e0:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <updateClockBufferMode1+0x274>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	1ad1      	subs	r1, r2, r3
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <updateClockBufferMode1+0x264>)
 80006e8:	fb83 2301 	smull	r2, r3, r3, r1
 80006ec:	109a      	asrs	r2, r3, #2
 80006ee:	17cb      	asrs	r3, r1, #31
 80006f0:	1ad2      	subs	r2, r2, r3
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1aca      	subs	r2, r1, r3
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <updateClockBufferMode1+0x268>)
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	e02a      	b.n	8000758 <updateClockBufferMode1+0x22c>
	}
	/* Den RED-Portrait sang (dem nguoc tu RED-1 -> 0) */
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counterP) / 10;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <updateClockBufferMode1+0x260>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <updateClockBufferMode1+0x26c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	441a      	add	r2, r3
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <updateClockBufferMode1+0x270>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	441a      	add	r2, r3
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <updateClockBufferMode1+0x274>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <updateClockBufferMode1+0x264>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1092      	asrs	r2, r2, #2
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <updateClockBufferMode1+0x268>)
 8000726:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counterP) % 10;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <updateClockBufferMode1+0x260>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <updateClockBufferMode1+0x26c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	441a      	add	r2, r3
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <updateClockBufferMode1+0x270>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	441a      	add	r2, r3
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <updateClockBufferMode1+0x274>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1ad1      	subs	r1, r2, r3
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <updateClockBufferMode1+0x264>)
 8000740:	fb83 2301 	smull	r2, r3, r3, r1
 8000744:	109a      	asrs	r2, r3, #2
 8000746:	17cb      	asrs	r3, r1, #31
 8000748:	1ad2      	subs	r2, r2, r3
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	1aca      	subs	r2, r1, r3
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <updateClockBufferMode1+0x268>)
 8000756:	60da      	str	r2, [r3, #12]
	}
	counterP++;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <updateClockBufferMode1+0x274>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <updateClockBufferMode1+0x274>)
 8000760:	6013      	str	r3, [r2, #0]
	/* Neu thoi gian RED-Portrait ket thuc, quay tro lai setup thoi gian cho GREEN-Portrait sang lai */
	if (counterP > RED + AMBER + GREEN) counterP = 1;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <updateClockBufferMode1+0x260>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <updateClockBufferMode1+0x270>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	441a      	add	r2, r3
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <updateClockBufferMode1+0x26c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	441a      	add	r2, r3
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <updateClockBufferMode1+0x274>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	da02      	bge.n	8000780 <updateClockBufferMode1+0x254>
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <updateClockBufferMode1+0x274>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000040 	.word	0x20000040
 800078c:	20000048 	.word	0x20000048
 8000790:	66666667 	.word	0x66666667
 8000794:	20000030 	.word	0x20000030
 8000798:	20000050 	.word	0x20000050
 800079c:	2000004c 	.word	0x2000004c
 80007a0:	20000044 	.word	0x20000044

080007a4 <updateClockBufferMode2>:

void updateClockBufferMode2() {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	// Hien thi mode 2
	led_buffer[0] = 0;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <updateClockBufferMode2+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <updateClockBufferMode2+0x4c>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	605a      	str	r2, [r3, #4]
	// Hien thi value RED
	led_buffer[2] = RED / 10;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <updateClockBufferMode2+0x50>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <updateClockBufferMode2+0x54>)
 80007ba:	fb82 1203 	smull	r1, r2, r2, r3
 80007be:	1092      	asrs	r2, r2, #2
 80007c0:	17db      	asrs	r3, r3, #31
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <updateClockBufferMode2+0x4c>)
 80007c6:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <updateClockBufferMode2+0x50>)
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <updateClockBufferMode2+0x54>)
 80007ce:	fb83 2301 	smull	r2, r3, r3, r1
 80007d2:	109a      	asrs	r2, r3, #2
 80007d4:	17cb      	asrs	r3, r1, #31
 80007d6:	1ad2      	subs	r2, r2, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1aca      	subs	r2, r1, r3
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <updateClockBufferMode2+0x4c>)
 80007e4:	60da      	str	r2, [r3, #12]
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000030 	.word	0x20000030
 80007f4:	20000048 	.word	0x20000048
 80007f8:	66666667 	.word	0x66666667

080007fc <updateClockBufferMode3>:

void updateClockBufferMode3() {
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	// Hien thi mode 3
	led_buffer[0] = 0;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <updateClockBufferMode3+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <updateClockBufferMode3+0x4c>)
 8000808:	2203      	movs	r2, #3
 800080a:	605a      	str	r2, [r3, #4]
	// Hien thi value AMBER
	led_buffer[2] = AMBER / 10;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <updateClockBufferMode3+0x50>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <updateClockBufferMode3+0x54>)
 8000812:	fb82 1203 	smull	r1, r2, r2, r3
 8000816:	1092      	asrs	r2, r2, #2
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <updateClockBufferMode3+0x4c>)
 800081e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = AMBER % 10;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <updateClockBufferMode3+0x50>)
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <updateClockBufferMode3+0x54>)
 8000826:	fb83 2301 	smull	r2, r3, r3, r1
 800082a:	109a      	asrs	r2, r3, #2
 800082c:	17cb      	asrs	r3, r1, #31
 800082e:	1ad2      	subs	r2, r2, r3
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	1aca      	subs	r2, r1, r3
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <updateClockBufferMode3+0x4c>)
 800083c:	60da      	str	r2, [r3, #12]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000030 	.word	0x20000030
 800084c:	2000004c 	.word	0x2000004c
 8000850:	66666667 	.word	0x66666667

08000854 <updateClockBufferMode4>:

void updateClockBufferMode4() {
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	// Hien thi mode 4
	led_buffer[0] = 0;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <updateClockBufferMode4+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <updateClockBufferMode4+0x4c>)
 8000860:	2204      	movs	r2, #4
 8000862:	605a      	str	r2, [r3, #4]
	// Hien thi value GREEN
	led_buffer[2] = GREEN / 10;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <updateClockBufferMode4+0x50>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <updateClockBufferMode4+0x54>)
 800086a:	fb82 1203 	smull	r1, r2, r2, r3
 800086e:	1092      	asrs	r2, r2, #2
 8000870:	17db      	asrs	r3, r3, #31
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <updateClockBufferMode4+0x4c>)
 8000876:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <updateClockBufferMode4+0x50>)
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <updateClockBufferMode4+0x54>)
 800087e:	fb83 2301 	smull	r2, r3, r3, r1
 8000882:	109a      	asrs	r2, r3, #2
 8000884:	17cb      	asrs	r3, r1, #31
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	1aca      	subs	r2, r1, r3
 8000892:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <updateClockBufferMode4+0x4c>)
 8000894:	60da      	str	r2, [r3, #12]
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000030 	.word	0x20000030
 80008a4:	20000050 	.word	0x20000050
 80008a8:	66666667 	.word	0x66666667

080008ac <fsm_traffic_light>:



#include "fsm_traffic_light.h"

void fsm_traffic_light() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch(status){
 80008b0:	4bbe      	ldr	r3, [pc, #760]	; (8000bac <fsm_traffic_light+0x300>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b2a      	cmp	r3, #42	; 0x2a
 80008b6:	f200 8439 	bhi.w	800112c <fsm_traffic_light+0x880>
 80008ba:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <fsm_traffic_light+0x14>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	0800096d 	.word	0x0800096d
 80008c4:	08000975 	.word	0x08000975
 80008c8:	08000c49 	.word	0x08000c49
 80008cc:	08000dd7 	.word	0x08000dd7
 80008d0:	08000f93 	.word	0x08000f93
 80008d4:	0800112d 	.word	0x0800112d
 80008d8:	0800112d 	.word	0x0800112d
 80008dc:	0800112d 	.word	0x0800112d
 80008e0:	0800112d 	.word	0x0800112d
 80008e4:	0800112d 	.word	0x0800112d
 80008e8:	0800112d 	.word	0x0800112d
 80008ec:	08000a09 	.word	0x08000a09
 80008f0:	08000a9b 	.word	0x08000a9b
 80008f4:	08000b1b 	.word	0x08000b1b
 80008f8:	08000bcd 	.word	0x08000bcd
 80008fc:	0800112d 	.word	0x0800112d
 8000900:	0800112d 	.word	0x0800112d
 8000904:	0800112d 	.word	0x0800112d
 8000908:	0800112d 	.word	0x0800112d
 800090c:	0800112d 	.word	0x0800112d
 8000910:	0800112d 	.word	0x0800112d
 8000914:	08000cc3 	.word	0x08000cc3
 8000918:	08000d49 	.word	0x08000d49
 800091c:	0800112d 	.word	0x0800112d
 8000920:	0800112d 	.word	0x0800112d
 8000924:	0800112d 	.word	0x0800112d
 8000928:	0800112d 	.word	0x0800112d
 800092c:	0800112d 	.word	0x0800112d
 8000930:	0800112d 	.word	0x0800112d
 8000934:	0800112d 	.word	0x0800112d
 8000938:	0800112d 	.word	0x0800112d
 800093c:	08000e51 	.word	0x08000e51
 8000940:	08000ef1 	.word	0x08000ef1
 8000944:	0800112d 	.word	0x0800112d
 8000948:	0800112d 	.word	0x0800112d
 800094c:	0800112d 	.word	0x0800112d
 8000950:	0800112d 	.word	0x0800112d
 8000954:	0800112d 	.word	0x0800112d
 8000958:	0800112d 	.word	0x0800112d
 800095c:	0800112d 	.word	0x0800112d
 8000960:	0800112d 	.word	0x0800112d
 8000964:	0800100d 	.word	0x0800100d
 8000968:	08001099 	.word	0x08001099
	case INIT:
		// Chuyen ve trang thai mode 1
		status = MODE1;
 800096c:	4b8f      	ldr	r3, [pc, #572]	; (8000bac <fsm_traffic_light+0x300>)
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
		break;
 8000972:	e3f0      	b.n	8001156 <fsm_traffic_light+0x8aa>
	case MODE1:
		// Chuyen ve trang thai period AUTO_REDL_GREENP
		status = AUTO_REDL_GREENP;
 8000974:	4b8d      	ldr	r3, [pc, #564]	; (8000bac <fsm_traffic_light+0x300>)
 8000976:	220b      	movs	r2, #11
 8000978:	601a      	str	r2, [r3, #0]

		// Setup cho den Landscape_RED va Portrait_GREEN sang
		HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2110      	movs	r1, #16
 800097e:	488c      	ldr	r0, [pc, #560]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000980:	f001 f921 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LA_GPIO_Port, LA_Pin, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	4889      	ldr	r0, [pc, #548]	; (8000bb0 <fsm_traffic_light+0x304>)
 800098a:	f001 f91c 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4887      	ldr	r0, [pc, #540]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000994:	f001 f917 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PR_GPIO_Port, PR_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	4884      	ldr	r0, [pc, #528]	; (8000bb0 <fsm_traffic_light+0x304>)
 800099e:	f001 f912 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA_GPIO_Port, PA_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a8:	4881      	ldr	r0, [pc, #516]	; (8000bb0 <fsm_traffic_light+0x304>)
 80009aa:	f001 f90c 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	487e      	ldr	r0, [pc, #504]	; (8000bb0 <fsm_traffic_light+0x304>)
 80009b6:	f001 f906 	bl	8001bc6 <HAL_GPIO_WritePin>

		// Setup ban dau va cap nhat gia tri, hien thi ra LED 7 doan
		counterL = 1;
 80009ba:	4b7e      	ldr	r3, [pc, #504]	; (8000bb4 <fsm_traffic_light+0x308>)
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
		counterP = 1;
 80009c0:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <fsm_traffic_light+0x30c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
		index_led = 0;
 80009c6:	4b7d      	ldr	r3, [pc, #500]	; (8000bbc <fsm_traffic_light+0x310>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
		updateClockBufferMode1();
 80009cc:	f7ff fdae 	bl	800052c <updateClockBufferMode1>
		update7SEG(index_led);
 80009d0:	4b7a      	ldr	r3, [pc, #488]	; (8000bbc <fsm_traffic_light+0x310>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fd13 	bl	8000400 <update7SEG>

		// Set Timer
		setTimer(0, GREEN * 1000);	// Timer cho truong hop AUTO_REDL_GREENP
 80009da:	4b79      	ldr	r3, [pc, #484]	; (8000bc0 <fsm_traffic_light+0x314>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fcd1 	bl	8001390 <setTimer>
		setTimer(1, 1000);			// Timer updateClockBufferMode1
 80009ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fccc 	bl	8001390 <setTimer>
		setTimer(2, 250);			// Timer quet LED 7-SEG
 80009f8:	21fa      	movs	r1, #250	; 0xfa
 80009fa:	2002      	movs	r0, #2
 80009fc:	f000 fcc8 	bl	8001390 <setTimer>
		clearTimer(3);				// O mode 1 khong su dung Timer cho blinking LED
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 fce3 	bl	80013cc <clearTimer>

		break;
 8000a06:	e3a6      	b.n	8001156 <fsm_traffic_light+0x8aa>

	case AUTO_REDL_GREENP:
		// Setup cho den Landscape_RED va Portrait_GREEN sang
		HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4868      	ldr	r0, [pc, #416]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000a0e:	f001 f8da 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LA_GPIO_Port, LA_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	4866      	ldr	r0, [pc, #408]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000a18:	f001 f8d5 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PR_GPIO_Port, PR_Pin, SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4863      	ldr	r0, [pc, #396]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000a22:	f001 f8d0 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	4860      	ldr	r0, [pc, #384]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000a2e:	f001 f8ca 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDL_AMBERP dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 8000a32:	4b64      	ldr	r3, [pc, #400]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d10c      	bne.n	8000a54 <fsm_traffic_light+0x1a8>
			status = AUTO_REDL_AMBERP;
 8000a3a:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <fsm_traffic_light+0x300>)
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 8000a40:	4b61      	ldr	r3, [pc, #388]	; (8000bc8 <fsm_traffic_light+0x31c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fc9e 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 8000a54:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <fsm_traffic_light+0x1be>
			updateClockBufferMode1();
 8000a5c:	f7ff fd66 	bl	800052c <updateClockBufferMode1>
			setTimer(1, 1000);
 8000a60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 fc93 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan tiep theo va setTimer lai
		if (timer_flag[2] == 1) {
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d108      	bne.n	8000a84 <fsm_traffic_light+0x1d8>
			update7SEG(index_led);
 8000a72:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <fsm_traffic_light+0x310>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fcc2 	bl	8000400 <update7SEG>
			setTimer(2, 250);
 8000a7c:	21fa      	movs	r1, #250	; 0xfa
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f000 fc86 	bl	8001390 <setTimer>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fb61 	bl	800014c <isButtonPressed>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	f040 834f 	bne.w	8001130 <fsm_traffic_light+0x884>
			status = MODE2;
 8000a92:	4b46      	ldr	r3, [pc, #280]	; (8000bac <fsm_traffic_light+0x300>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a98:	e34a      	b.n	8001130 <fsm_traffic_light+0x884>

	case AUTO_REDL_AMBERP:
		// Setup cho den Landscape_RED va Portrait_AMBER sang
		HAL_GPIO_WritePin(PA_GPIO_Port, PA_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	4843      	ldr	r0, [pc, #268]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000aa2:	f001 f890 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	4840      	ldr	r0, [pc, #256]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000aae:	f001 f88a 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDP_GREENL dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d10c      	bne.n	8000ad4 <fsm_traffic_light+0x228>
			status = AUTO_REDP_GREENL;
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <fsm_traffic_light+0x300>)
 8000abc:	220d      	movs	r2, #13
 8000abe:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <fsm_traffic_light+0x314>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	4619      	mov	r1, r3
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 fc5e 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d106      	bne.n	8000aea <fsm_traffic_light+0x23e>
			updateClockBufferMode1();
 8000adc:	f7ff fd26 	bl	800052c <updateClockBufferMode1>
			setTimer(1, 1000);
 8000ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 fc53 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan tiep theo va setTimer lai
		if (timer_flag[2] == 1) {
 8000aea:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d108      	bne.n	8000b04 <fsm_traffic_light+0x258>
			update7SEG(index_led);
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <fsm_traffic_light+0x310>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc82 	bl	8000400 <update7SEG>
			setTimer(2, 250);
 8000afc:	21fa      	movs	r1, #250	; 0xfa
 8000afe:	2002      	movs	r0, #2
 8000b00:	f000 fc46 	bl	8001390 <setTimer>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fb21 	bl	800014c <isButtonPressed>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f040 8311 	bne.w	8001134 <fsm_traffic_light+0x888>
			status = MODE2;
 8000b12:	4b26      	ldr	r3, [pc, #152]	; (8000bac <fsm_traffic_light+0x300>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b18:	e30c      	b.n	8001134 <fsm_traffic_light+0x888>

	case AUTO_REDP_GREENL:
		// Setup cho den Portrait_RED va Landscape_GREEN sang
		HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000b20:	f001 f851 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA_GPIO_Port, PA_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000b2c:	f001 f84b 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PR_GPIO_Port, PR_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000b36:	f001 f846 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <fsm_traffic_light+0x304>)
 8000b40:	f001 f841 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDP_AMBERL dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10c      	bne.n	8000b66 <fsm_traffic_light+0x2ba>
			status = AUTO_REDP_AMBERL;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <fsm_traffic_light+0x300>)
 8000b4e:	220e      	movs	r2, #14
 8000b50:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <fsm_traffic_light+0x31c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b5a:	fb02 f303 	mul.w	r3, r2, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 fc15 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d106      	bne.n	8000b7c <fsm_traffic_light+0x2d0>
			updateClockBufferMode1();
 8000b6e:	f7ff fcdd 	bl	800052c <updateClockBufferMode1>
			setTimer(1, 1000);
 8000b72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fc0a 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan tiep theo va setTimer lai
		if (timer_flag[2] == 1) {
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <fsm_traffic_light+0x318>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d108      	bne.n	8000b96 <fsm_traffic_light+0x2ea>
			update7SEG(index_led);
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <fsm_traffic_light+0x310>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fc39 	bl	8000400 <update7SEG>
			setTimer(2, 250);
 8000b8e:	21fa      	movs	r1, #250	; 0xfa
 8000b90:	2002      	movs	r0, #2
 8000b92:	f000 fbfd 	bl	8001390 <setTimer>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fad8 	bl	800014c <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	f040 82ca 	bne.w	8001138 <fsm_traffic_light+0x88c>
			status = MODE2;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <fsm_traffic_light+0x300>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000baa:	e2c5      	b.n	8001138 <fsm_traffic_light+0x88c>
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	20000040 	.word	0x20000040
 8000bb8:	20000044 	.word	0x20000044
 8000bbc:	200000a0 	.word	0x200000a0
 8000bc0:	20000050 	.word	0x20000050
 8000bc4:	200000b8 	.word	0x200000b8
 8000bc8:	2000004c 	.word	0x2000004c

	case AUTO_REDP_AMBERL:
		// Setup cho den Portrait_RED va Landscape_AMBER sang
		HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	48bd      	ldr	r0, [pc, #756]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000bd2:	f000 fff8 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LA_GPIO_Port, LA_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	48bb      	ldr	r0, [pc, #748]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000bdc:	f000 fff3 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDL_GREENP dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 8000be0:	4bba      	ldr	r3, [pc, #744]	; (8000ecc <fsm_traffic_light+0x620>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d10c      	bne.n	8000c02 <fsm_traffic_light+0x356>
			status = AUTO_REDL_GREENP;
 8000be8:	4bb9      	ldr	r3, [pc, #740]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000bea:	220b      	movs	r2, #11
 8000bec:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8000bee:	4bb9      	ldr	r3, [pc, #740]	; (8000ed4 <fsm_traffic_light+0x628>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf6:	fb02 f303 	mul.w	r3, r2, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fbc7 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 8000c02:	4bb2      	ldr	r3, [pc, #712]	; (8000ecc <fsm_traffic_light+0x620>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d106      	bne.n	8000c18 <fsm_traffic_light+0x36c>
			updateClockBufferMode1();
 8000c0a:	f7ff fc8f 	bl	800052c <updateClockBufferMode1>
			setTimer(1, 1000);
 8000c0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fbbc 	bl	8001390 <setTimer>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan tiep theo va setTimer lai
		if (timer_flag[2] == 1) {
 8000c18:	4bac      	ldr	r3, [pc, #688]	; (8000ecc <fsm_traffic_light+0x620>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <fsm_traffic_light+0x386>
			update7SEG(index_led);
 8000c20:	4bad      	ldr	r3, [pc, #692]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbeb 	bl	8000400 <update7SEG>
			setTimer(2, 250);
 8000c2a:	21fa      	movs	r1, #250	; 0xfa
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f000 fbaf 	bl	8001390 <setTimer>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fa8a 	bl	800014c <isButtonPressed>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	f040 827e 	bne.w	800113c <fsm_traffic_light+0x890>
			status = MODE2;
 8000c40:	4ba3      	ldr	r3, [pc, #652]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c46:	e279      	b.n	800113c <fsm_traffic_light+0x890>
	case MODE2:
		// Setup cho tat ca cac den RED sang
		HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	489e      	ldr	r0, [pc, #632]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000c4e:	f000 ffba 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PR_GPIO_Port, PR_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	489c      	ldr	r0, [pc, #624]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000c58:	f000 ffb5 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LA_GPIO_Port, LA_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2120      	movs	r1, #32
 8000c60:	4899      	ldr	r0, [pc, #612]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000c62:	f000 ffb0 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA_GPIO_Port, PA_Pin, SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6c:	4896      	ldr	r0, [pc, #600]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000c6e:	f000 ffaa 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4894      	ldr	r0, [pc, #592]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000c78:	f000 ffa5 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4891      	ldr	r0, [pc, #580]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000c84:	f000 ff9f 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Update lai gia tri hien thi ra LED 7 doan
		index_led = 0;
 8000c88:	4b93      	ldr	r3, [pc, #588]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
		updateClockBufferMode2();
 8000c8e:	f7ff fd89 	bl	80007a4 <updateClockBufferMode2>
		update7SEG(index_led);
 8000c92:	4b91      	ldr	r3, [pc, #580]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fbb2 	bl	8000400 <update7SEG>
		// SetTimer
		setTimer(2, 250);	// Timer de quet LED 7 doan dong thoi update lai buffer
 8000c9c:	21fa      	movs	r1, #250	; 0xfa
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f000 fb76 	bl	8001390 <setTimer>
		setTimer(3, 500);	// Timer blinking LED-RED
 8000ca4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fb71 	bl	8001390 <setTimer>
		clearTimer(0);		// O mode nay khong su dung timer de hien thi den o che do normal-mode
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fb8c 	bl	80013cc <clearTimer>
		clearTimer(1);		// Khong can su dung timer de update buffer moi giay
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 fb89 	bl	80013cc <clearTimer>
		// Chuyen ve trang thai AUTO_RED
		status = AUTO_RED;
 8000cba:	4b85      	ldr	r3, [pc, #532]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000cbc:	2215      	movs	r2, #21
 8000cbe:	601a      	str	r2, [r3, #0]

		break;
 8000cc0:	e249      	b.n	8001156 <fsm_traffic_light+0x8aa>

	case AUTO_RED:
		// Neu timer_flag[3] == 1, toggle tat ca cac den RED va setTimer lai
		if (timer_flag[3] == 1) {
 8000cc2:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <fsm_traffic_light+0x620>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10c      	bne.n	8000ce4 <fsm_traffic_light+0x438>
			setTimer(3, 500);
 8000cca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f000 fb5e 	bl	8001390 <setTimer>
			HAL_GPIO_TogglePin(LR_GPIO_Port, LR_Pin);
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	487c      	ldr	r0, [pc, #496]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000cd8:	f000 ff8d 	bl	8001bf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PR_GPIO_Port, PR_Pin);
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	487a      	ldr	r0, [pc, #488]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000ce0:	f000 ff89 	bl	8001bf6 <HAL_GPIO_TogglePin>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan khac, update lai buffer va setTimer lai
		if (timer_flag[2] == 1) {
 8000ce4:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <fsm_traffic_light+0x620>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10a      	bne.n	8000d02 <fsm_traffic_light+0x456>
			setTimer(2, 250);
 8000cec:	21fa      	movs	r1, #250	; 0xfa
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 fb4e 	bl	8001390 <setTimer>
			updateClockBufferMode2();
 8000cf4:	f7ff fd56 	bl	80007a4 <updateClockBufferMode2>
			update7SEG(index_led);
 8000cf8:	4b77      	ldr	r3, [pc, #476]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fb7f 	bl	8000400 <update7SEG>
		}
		// Neu nhan nut MODE, he thong chuyen sang trang thai mode 3
		if (isButtonPressed(0) == 1) {
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fa22 	bl	800014c <isButtonPressed>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <fsm_traffic_light+0x468>
			status = MODE3;
 8000d0e:	4b70      	ldr	r3, [pc, #448]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000d10:	2203      	movs	r2, #3
 8000d12:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian RED, dong thoi chuyen sang trang thai INC_RED
		if (isButtonPressed(1) == 1) {
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fa19 	bl	800014c <isButtonPressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	f040 820f 	bne.w	8001140 <fsm_traffic_light+0x894>
			status = INC_RED;
 8000d22:	4b6b      	ldr	r3, [pc, #428]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000d24:	2216      	movs	r2, #22
 8000d26:	601a      	str	r2, [r3, #0]
			if (RED >= 99) RED = AMBER + 1;
 8000d28:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <fsm_traffic_light+0x630>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b62      	cmp	r3, #98	; 0x62
 8000d2e:	dd05      	ble.n	8000d3c <fsm_traffic_light+0x490>
 8000d30:	4b6b      	ldr	r3, [pc, #428]	; (8000ee0 <fsm_traffic_light+0x634>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a69      	ldr	r2, [pc, #420]	; (8000edc <fsm_traffic_light+0x630>)
 8000d38:	6013      	str	r3, [r2, #0]
			else RED++;
		}
		break;
 8000d3a:	e201      	b.n	8001140 <fsm_traffic_light+0x894>
			else RED++;
 8000d3c:	4b67      	ldr	r3, [pc, #412]	; (8000edc <fsm_traffic_light+0x630>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a66      	ldr	r2, [pc, #408]	; (8000edc <fsm_traffic_light+0x630>)
 8000d44:	6013      	str	r3, [r2, #0]
		break;
 8000d46:	e1fb      	b.n	8001140 <fsm_traffic_light+0x894>

	case INC_RED:
		// Neu timer_flag[3] == 1, toggle tat ca cac den RED va setTimer lai
		if (timer_flag[3] == 1) {
 8000d48:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <fsm_traffic_light+0x620>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10c      	bne.n	8000d6a <fsm_traffic_light+0x4be>
			setTimer(3, 500);
 8000d50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 fb1b 	bl	8001390 <setTimer>
			HAL_GPIO_TogglePin(LR_GPIO_Port, LR_Pin);
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	485a      	ldr	r0, [pc, #360]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000d5e:	f000 ff4a 	bl	8001bf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PR_GPIO_Port, PR_Pin);
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4858      	ldr	r0, [pc, #352]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000d66:	f000 ff46 	bl	8001bf6 <HAL_GPIO_TogglePin>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan khac, update lai buffer va setTimer lai
		if (timer_flag[2] == 1) {
 8000d6a:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <fsm_traffic_light+0x620>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d10a      	bne.n	8000d88 <fsm_traffic_light+0x4dc>
			setTimer(2, 250);
 8000d72:	21fa      	movs	r1, #250	; 0xfa
 8000d74:	2002      	movs	r0, #2
 8000d76:	f000 fb0b 	bl	8001390 <setTimer>
			updateClockBufferMode2();
 8000d7a:	f7ff fd13 	bl	80007a4 <updateClockBufferMode2>
			update7SEG(index_led);
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fb3c 	bl	8000400 <update7SEG>
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian RED
		if (isButtonPressed(1) == 1) {
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff f9df 	bl	800014c <isButtonPressed>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10e      	bne.n	8000db2 <fsm_traffic_light+0x506>
			if (RED >= 99) RED = AMBER + 1;
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <fsm_traffic_light+0x630>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b62      	cmp	r3, #98	; 0x62
 8000d9a:	dd05      	ble.n	8000da8 <fsm_traffic_light+0x4fc>
 8000d9c:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <fsm_traffic_light+0x634>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <fsm_traffic_light+0x630>)
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e004      	b.n	8000db2 <fsm_traffic_light+0x506>
			else RED++;
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <fsm_traffic_light+0x630>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <fsm_traffic_light+0x630>)
 8000db0:	6013      	str	r3, [r2, #0]
		}
		// Neu nhan nut SET, co dinh gia tri thoi gian RED, quay tro ve trang thai AUTO_RED, dong thoi cap nhat lai bo ba gia tri thoi gian RED, AMBER va GREEN
		if (isButtonPressed(2) == 1) {
 8000db2:	2002      	movs	r0, #2
 8000db4:	f7ff f9ca 	bl	800014c <isButtonPressed>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	f040 81c2 	bne.w	8001144 <fsm_traffic_light+0x898>
			status = AUTO_RED;
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000dc2:	2215      	movs	r2, #21
 8000dc4:	601a      	str	r2, [r3, #0]
			GREEN = RED - AMBER;
 8000dc6:	4b45      	ldr	r3, [pc, #276]	; (8000edc <fsm_traffic_light+0x630>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <fsm_traffic_light+0x634>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <fsm_traffic_light+0x628>)
 8000dd2:	6013      	str	r3, [r2, #0]
		}
		break;
 8000dd4:	e1b6      	b.n	8001144 <fsm_traffic_light+0x898>
	case MODE3:
		// Setup cho tat ca cac den AMBER sang
		HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000ddc:	f000 fef3 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PR_GPIO_Port, PR_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000de6:	f000 feee 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LA_GPIO_Port, LA_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4836      	ldr	r0, [pc, #216]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000df0:	f000 fee9 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA_GPIO_Port, PA_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfa:	4833      	ldr	r0, [pc, #204]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000dfc:	f000 fee3 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2140      	movs	r1, #64	; 0x40
 8000e04:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000e06:	f000 fede 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000e12:	f000 fed8 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Update lai gia tri hien thi ra LED 7 doan
		index_led = 0;
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
		updateClockBufferMode2();
 8000e1c:	f7ff fcc2 	bl	80007a4 <updateClockBufferMode2>
		update7SEG(index_led);
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff faeb 	bl	8000400 <update7SEG>
		// SetTimer
		setTimer(2, 250);	// Timer de quet LED 7 doan dong thoi update lai buffer
 8000e2a:	21fa      	movs	r1, #250	; 0xfa
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f000 faaf 	bl	8001390 <setTimer>
		setTimer(3, 500);	// Timer blinking LED-AMBER
 8000e32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 faaa 	bl	8001390 <setTimer>
		clearTimer(0);		// O mode nay khong su dung timer de hien thi den o che do normal-mode
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 fac5 	bl	80013cc <clearTimer>
		clearTimer(1);		// Khong can su dung timer de update buffer moi giay
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 fac2 	bl	80013cc <clearTimer>
		// Chuyen ve trang thai AUTO_AMBER
		status = AUTO_AMBER;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000e4a:	221f      	movs	r2, #31
 8000e4c:	601a      	str	r2, [r3, #0]
		break;
 8000e4e:	e182      	b.n	8001156 <fsm_traffic_light+0x8aa>

	case AUTO_AMBER:
		// Neu timer_flag[3] == 1, toggle tat ca cac den AMBER va setTimer lai
		if (timer_flag[3] == 1) {
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <fsm_traffic_light+0x620>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10d      	bne.n	8000e74 <fsm_traffic_light+0x5c8>
			setTimer(3, 500);
 8000e58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 fa97 	bl	8001390 <setTimer>
			HAL_GPIO_TogglePin(LA_GPIO_Port, LA_Pin);
 8000e62:	2120      	movs	r1, #32
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000e66:	f000 fec6 	bl	8001bf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PA_GPIO_Port, PA_Pin);
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <fsm_traffic_light+0x61c>)
 8000e70:	f000 fec1 	bl	8001bf6 <HAL_GPIO_TogglePin>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan khac, update lai buffer va setTimer lai
		if (timer_flag[2] == 1) {
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <fsm_traffic_light+0x620>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10a      	bne.n	8000e92 <fsm_traffic_light+0x5e6>
			setTimer(2, 250);
 8000e7c:	21fa      	movs	r1, #250	; 0xfa
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 fa86 	bl	8001390 <setTimer>
			updateClockBufferMode3();
 8000e84:	f7ff fcba 	bl	80007fc <updateClockBufferMode3>
			update7SEG(index_led);
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <fsm_traffic_light+0x62c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fab7 	bl	8000400 <update7SEG>
		}
		// Neu nhan nut MODE, he thong chuyen sang trang thai mode 4
		if (isButtonPressed(0) == 1) {
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff f95a 	bl	800014c <isButtonPressed>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d102      	bne.n	8000ea4 <fsm_traffic_light+0x5f8>
			status = MODE4;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian AMBER, dong thoi chuyen sang trang thai INC_AMBER
		if (isButtonPressed(1) == 1) {
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff f951 	bl	800014c <isButtonPressed>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f040 814b 	bne.w	8001148 <fsm_traffic_light+0x89c>
			status = INC_AMBER;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <fsm_traffic_light+0x624>)
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	601a      	str	r2, [r3, #0]
			if (AMBER >= 5) AMBER = 1;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <fsm_traffic_light+0x634>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	dd11      	ble.n	8000ee4 <fsm_traffic_light+0x638>
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <fsm_traffic_light+0x634>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
			else AMBER++;
		}
		break;
 8000ec6:	e13f      	b.n	8001148 <fsm_traffic_light+0x89c>
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	200000b8 	.word	0x200000b8
 8000ed0:	200000a4 	.word	0x200000a4
 8000ed4:	20000050 	.word	0x20000050
 8000ed8:	200000a0 	.word	0x200000a0
 8000edc:	20000048 	.word	0x20000048
 8000ee0:	2000004c 	.word	0x2000004c
			else AMBER++;
 8000ee4:	4b9d      	ldr	r3, [pc, #628]	; (800115c <fsm_traffic_light+0x8b0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a9c      	ldr	r2, [pc, #624]	; (800115c <fsm_traffic_light+0x8b0>)
 8000eec:	6013      	str	r3, [r2, #0]
		break;
 8000eee:	e12b      	b.n	8001148 <fsm_traffic_light+0x89c>

	case INC_AMBER:
		// Neu timer_flag[3] == 1, toggle tat ca cac den AMBER va setTimer lai
		if (timer_flag[3] == 1) {
 8000ef0:	4b9b      	ldr	r3, [pc, #620]	; (8001160 <fsm_traffic_light+0x8b4>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10d      	bne.n	8000f14 <fsm_traffic_light+0x668>
			setTimer(3, 500);
 8000ef8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 fa47 	bl	8001390 <setTimer>
			HAL_GPIO_TogglePin(LA_GPIO_Port, LA_Pin);
 8000f02:	2120      	movs	r1, #32
 8000f04:	4897      	ldr	r0, [pc, #604]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000f06:	f000 fe76 	bl	8001bf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PA_GPIO_Port, PA_Pin);
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	4895      	ldr	r0, [pc, #596]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000f10:	f000 fe71 	bl	8001bf6 <HAL_GPIO_TogglePin>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan khac, update lai buffer va setTimer lai
		if (timer_flag[2] == 1) {
 8000f14:	4b92      	ldr	r3, [pc, #584]	; (8001160 <fsm_traffic_light+0x8b4>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10a      	bne.n	8000f32 <fsm_traffic_light+0x686>
			setTimer(2, 250);
 8000f1c:	21fa      	movs	r1, #250	; 0xfa
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 fa36 	bl	8001390 <setTimer>
			updateClockBufferMode3();
 8000f24:	f7ff fc6a 	bl	80007fc <updateClockBufferMode3>
			update7SEG(index_led);
 8000f28:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <fsm_traffic_light+0x8bc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fa67 	bl	8000400 <update7SEG>
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian AMBER, dong thoi chuyen sang trang thai INC_AMBER
		if (isButtonPressed(1) == 1) {
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff f90a 	bl	800014c <isButtonPressed>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10c      	bne.n	8000f58 <fsm_traffic_light+0x6ac>
			if (AMBER >= 5) AMBER = 1;
 8000f3e:	4b87      	ldr	r3, [pc, #540]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	dd03      	ble.n	8000f4e <fsm_traffic_light+0x6a2>
 8000f46:	4b85      	ldr	r3, [pc, #532]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e004      	b.n	8000f58 <fsm_traffic_light+0x6ac>
			else AMBER++;
 8000f4e:	4b83      	ldr	r3, [pc, #524]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a81      	ldr	r2, [pc, #516]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f56:	6013      	str	r3, [r2, #0]
		}
		// Neu nhan nut SET, co dinh gia tri thoi gian AMBER, quay tro ve trang thai AUTO_AMBER, dong thoi cap nhat lai bo ba gia tri thoi gian RED, AMBER va GREEN
		if (isButtonPressed(2) == 1) {
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff f8f7 	bl	800014c <isButtonPressed>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 80f3 	bne.w	800114c <fsm_traffic_light+0x8a0>
			status = AUTO_AMBER;
 8000f66:	4b81      	ldr	r3, [pc, #516]	; (800116c <fsm_traffic_light+0x8c0>)
 8000f68:	221f      	movs	r2, #31
 8000f6a:	601a      	str	r2, [r3, #0]
			if (RED <= AMBER) RED = AMBER + 1;
 8000f6c:	4b80      	ldr	r3, [pc, #512]	; (8001170 <fsm_traffic_light+0x8c4>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b7a      	ldr	r3, [pc, #488]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dc04      	bgt.n	8000f82 <fsm_traffic_light+0x6d6>
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a7c      	ldr	r2, [pc, #496]	; (8001170 <fsm_traffic_light+0x8c4>)
 8000f80:	6013      	str	r3, [r2, #0]
			GREEN = RED - AMBER;
 8000f82:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <fsm_traffic_light+0x8c4>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b75      	ldr	r3, [pc, #468]	; (800115c <fsm_traffic_light+0x8b0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4a79      	ldr	r2, [pc, #484]	; (8001174 <fsm_traffic_light+0x8c8>)
 8000f8e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000f90:	e0dc      	b.n	800114c <fsm_traffic_light+0x8a0>
	case MODE4:
		// Setup cho tat ca cac den GREEN sang
		HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2110      	movs	r1, #16
 8000f96:	4873      	ldr	r0, [pc, #460]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000f98:	f000 fe15 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PR_GPIO_Port, PR_Pin, SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	4870      	ldr	r0, [pc, #448]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000fa2:	f000 fe10 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LA_GPIO_Port, LA_Pin, SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2120      	movs	r1, #32
 8000faa:	486e      	ldr	r0, [pc, #440]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000fac:	f000 fe0b 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA_GPIO_Port, PA_Pin, SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	486b      	ldr	r0, [pc, #428]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000fb8:	f000 fe05 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	4868      	ldr	r0, [pc, #416]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000fc2:	f000 fe00 	bl	8001bc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fcc:	4865      	ldr	r0, [pc, #404]	; (8001164 <fsm_traffic_light+0x8b8>)
 8000fce:	f000 fdfa 	bl	8001bc6 <HAL_GPIO_WritePin>
		// Update lai gia tri hien thi ra LED 7 doan
		index_led = 0;
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <fsm_traffic_light+0x8bc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
		updateClockBufferMode2();
 8000fd8:	f7ff fbe4 	bl	80007a4 <updateClockBufferMode2>
		update7SEG(index_led);
 8000fdc:	4b62      	ldr	r3, [pc, #392]	; (8001168 <fsm_traffic_light+0x8bc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa0d 	bl	8000400 <update7SEG>
		// SetTimer
		setTimer(2, 250);	// Timer de quet LED 7 doan dong thoi update lai buffer
 8000fe6:	21fa      	movs	r1, #250	; 0xfa
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f000 f9d1 	bl	8001390 <setTimer>
		setTimer(3, 500);	// Timer blinking LED-GREEN
 8000fee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f9cc 	bl	8001390 <setTimer>
		clearTimer(0);		// O mode nay khong su dung timer de hien thi den o che do normal-mode
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f9e7 	bl	80013cc <clearTimer>
		clearTimer(1);		// Khong can su dung timer de update buffer moi giay
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 f9e4 	bl	80013cc <clearTimer>
		// Chuyen ve trang thai AUTO_GREEN
		status = AUTO_GREEN;
 8001004:	4b59      	ldr	r3, [pc, #356]	; (800116c <fsm_traffic_light+0x8c0>)
 8001006:	2229      	movs	r2, #41	; 0x29
 8001008:	601a      	str	r2, [r3, #0]
		break;
 800100a:	e0a4      	b.n	8001156 <fsm_traffic_light+0x8aa>

	case AUTO_GREEN:
		// Neu timer_flag[3] == 1, toggle tat ca cac den GREEN va setTimer lai
		if (timer_flag[3] == 1) {
 800100c:	4b54      	ldr	r3, [pc, #336]	; (8001160 <fsm_traffic_light+0x8b4>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10d      	bne.n	8001030 <fsm_traffic_light+0x784>
			setTimer(3, 500);
 8001014:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f9b9 	bl	8001390 <setTimer>
			HAL_GPIO_TogglePin(LG_GPIO_Port, LG_Pin);
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4850      	ldr	r0, [pc, #320]	; (8001164 <fsm_traffic_light+0x8b8>)
 8001022:	f000 fde8 	bl	8001bf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PG_GPIO_Port, PG_Pin);
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	484e      	ldr	r0, [pc, #312]	; (8001164 <fsm_traffic_light+0x8b8>)
 800102c:	f000 fde3 	bl	8001bf6 <HAL_GPIO_TogglePin>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan khac, update lai buffer va setTimer lai
		if (timer_flag[2] == 1) {
 8001030:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <fsm_traffic_light+0x8b4>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d10a      	bne.n	800104e <fsm_traffic_light+0x7a2>
			setTimer(2, 250);
 8001038:	21fa      	movs	r1, #250	; 0xfa
 800103a:	2002      	movs	r0, #2
 800103c:	f000 f9a8 	bl	8001390 <setTimer>
			updateClockBufferMode4();
 8001040:	f7ff fc08 	bl	8000854 <updateClockBufferMode4>
			update7SEG(index_led);
 8001044:	4b48      	ldr	r3, [pc, #288]	; (8001168 <fsm_traffic_light+0x8bc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f9d9 	bl	8000400 <update7SEG>
		}
		// Neu nhan nut MODE, he thong chuyen sang trang thai mode 1
		if (isButtonPressed(0) == 1) {
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff f87c 	bl	800014c <isButtonPressed>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <fsm_traffic_light+0x7b4>
			status = MODE1;
 800105a:	4b44      	ldr	r3, [pc, #272]	; (800116c <fsm_traffic_light+0x8c0>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian GREEN, dong thoi chuyen sang trang thai INC_GREEN
		if (isButtonPressed(1) == 1) {
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff f873 	bl	800014c <isButtonPressed>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d171      	bne.n	8001150 <fsm_traffic_light+0x8a4>
			status = INC_GREEN;
 800106c:	4b3f      	ldr	r3, [pc, #252]	; (800116c <fsm_traffic_light+0x8c0>)
 800106e:	222a      	movs	r2, #42	; 0x2a
 8001070:	601a      	str	r2, [r3, #0]
			if (GREEN >= RED - AMBER) GREEN = 1;
 8001072:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <fsm_traffic_light+0x8c4>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <fsm_traffic_light+0x8b0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <fsm_traffic_light+0x8c8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	dc03      	bgt.n	800108c <fsm_traffic_light+0x7e0>
 8001084:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <fsm_traffic_light+0x8c8>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
			else GREEN++;
		}
		break;
 800108a:	e061      	b.n	8001150 <fsm_traffic_light+0x8a4>
			else GREEN++;
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <fsm_traffic_light+0x8c8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	4a38      	ldr	r2, [pc, #224]	; (8001174 <fsm_traffic_light+0x8c8>)
 8001094:	6013      	str	r3, [r2, #0]
		break;
 8001096:	e05b      	b.n	8001150 <fsm_traffic_light+0x8a4>

	case INC_GREEN:
		// Neu timer_flag[3] == 1, toggle tat ca cac den GREEN va setTimer lai
		if (timer_flag[3] == 1) {
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <fsm_traffic_light+0x8b4>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10d      	bne.n	80010bc <fsm_traffic_light+0x810>
			setTimer(3, 500);
 80010a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f973 	bl	8001390 <setTimer>
			HAL_GPIO_TogglePin(LG_GPIO_Port, LG_Pin);
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <fsm_traffic_light+0x8b8>)
 80010ae:	f000 fda2 	bl	8001bf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PG_GPIO_Port, PG_Pin);
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	482b      	ldr	r0, [pc, #172]	; (8001164 <fsm_traffic_light+0x8b8>)
 80010b8:	f000 fd9d 	bl	8001bf6 <HAL_GPIO_TogglePin>
		}
		// Neu timer_flag[2] == 1, quet sang LED 7 doan khac, update lai buffer va setTimer lai
		if (timer_flag[2] == 1) {
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <fsm_traffic_light+0x8b4>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10a      	bne.n	80010da <fsm_traffic_light+0x82e>
			setTimer(2, 250);
 80010c4:	21fa      	movs	r1, #250	; 0xfa
 80010c6:	2002      	movs	r0, #2
 80010c8:	f000 f962 	bl	8001390 <setTimer>
			updateClockBufferMode4();
 80010cc:	f7ff fbc2 	bl	8000854 <updateClockBufferMode4>
			update7SEG(index_led);
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <fsm_traffic_light+0x8bc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f993 	bl	8000400 <update7SEG>
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian GREEN, dong thoi chuyen sang trang thai INC_GREEN
		if (isButtonPressed(1) == 1) {
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff f836 	bl	800014c <isButtonPressed>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d111      	bne.n	800110a <fsm_traffic_light+0x85e>
			if (GREEN >= RED - AMBER) GREEN = 1;
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <fsm_traffic_light+0x8c4>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <fsm_traffic_light+0x8b0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <fsm_traffic_light+0x8c8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dc03      	bgt.n	8001100 <fsm_traffic_light+0x854>
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <fsm_traffic_light+0x8c8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e004      	b.n	800110a <fsm_traffic_light+0x85e>
			else GREEN++;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <fsm_traffic_light+0x8c8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <fsm_traffic_light+0x8c8>)
 8001108:	6013      	str	r3, [r2, #0]
		}
		// Neu nhan nut SET, co dinh gia tri thoi gian GREEN, quay tro ve trang thai AUTO_GREEN, dong thoi cap nhat lai bo ba gia tri thoi gian RED, AMBER va GREEN
		if (isButtonPressed(2) == 1) {
 800110a:	2002      	movs	r0, #2
 800110c:	f7ff f81e 	bl	800014c <isButtonPressed>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d11e      	bne.n	8001154 <fsm_traffic_light+0x8a8>
			status = AUTO_GREEN;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <fsm_traffic_light+0x8c0>)
 8001118:	2229      	movs	r2, #41	; 0x29
 800111a:	601a      	str	r2, [r3, #0]
			RED = GREEN + AMBER;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <fsm_traffic_light+0x8c8>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <fsm_traffic_light+0x8b0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <fsm_traffic_light+0x8c4>)
 8001128:	6013      	str	r3, [r2, #0]
		}
		break;
 800112a:	e013      	b.n	8001154 <fsm_traffic_light+0x8a8>

	default:
		break;
 800112c:	bf00      	nop
 800112e:	e012      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001130:	bf00      	nop
 8001132:	e010      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001134:	bf00      	nop
 8001136:	e00e      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001138:	bf00      	nop
 800113a:	e00c      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 800113c:	bf00      	nop
 800113e:	e00a      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001140:	bf00      	nop
 8001142:	e008      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001144:	bf00      	nop
 8001146:	e006      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001148:	bf00      	nop
 800114a:	e004      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 800114c:	bf00      	nop
 800114e:	e002      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001150:	bf00      	nop
 8001152:	e000      	b.n	8001156 <fsm_traffic_light+0x8aa>
		break;
 8001154:	bf00      	nop
	}
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000004c 	.word	0x2000004c
 8001160:	200000b8 	.word	0x200000b8
 8001164:	40010800 	.word	0x40010800
 8001168:	200000a0 	.word	0x200000a0
 800116c:	200000a4 	.word	0x200000a4
 8001170:	20000048 	.word	0x20000048
 8001174:	20000050 	.word	0x20000050

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fa22 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f80c 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f892 	bl	80012ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001188:	f000 f844 	bl	8001214 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <main+0x20>)
 800118e:	f001 f977 	bl	8002480 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_traffic_light();
 8001192:	f7ff fb8b 	bl	80008ac <fsm_traffic_light>
 8001196:	e7fc      	b.n	8001192 <main+0x1a>
 8001198:	200000c8 	.word	0x200000c8

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b090      	sub	sp, #64	; 0x40
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2228      	movs	r2, #40	; 0x28
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fd24 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c6:	2310      	movs	r3, #16
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fd28 	bl	8001c28 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011de:	f000 f8d1 	bl	8001384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 ff94 	bl	8002128 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001206:	f000 f8bd 	bl	8001384 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3740      	adds	r7, #64	; 0x40
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM2_Init+0x94>)
 800123a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800123e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001248:	2209      	movs	r2, #9
 800124a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_TIM2_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <MX_TIM2_Init+0x94>)
 800125a:	f001 f8c1 	bl	80023e0 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001264:	f000 f88e 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001276:	f001 fa57 	bl	8002728 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 f880 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM2_Init+0x94>)
 8001292:	f001 fc23 	bl	8002adc <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 f872 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200000c8 	.word	0x200000c8

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_GPIO_Init+0xb4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <MX_GPIO_Init+0xb4>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_GPIO_Init+0xb4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_GPIO_Init+0xb4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a20      	ldr	r2, [pc, #128]	; (8001360 <MX_GPIO_Init+0xb4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_GPIO_Init+0xb4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR_Pin|LA_Pin|LG_Pin|PR_Pin
 80012f0:	2200      	movs	r2, #0
 80012f2:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 80012f6:	481b      	ldr	r0, [pc, #108]	; (8001364 <MX_GPIO_Init+0xb8>)
 80012f8:	f000 fc65 	bl	8001bc6 <HAL_GPIO_WritePin>
                          |PA_Pin|PG_Pin|P1_Pin|P2_Pin
                          |L1_Pin|L2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80012fc:	2200      	movs	r2, #0
 80012fe:	217f      	movs	r1, #127	; 0x7f
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <MX_GPIO_Init+0xbc>)
 8001302:	f000 fc60 	bl	8001bc6 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MODE_Pin INC_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|INC_Pin|SET_Pin;
 8001306:	230e      	movs	r3, #14
 8001308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4619      	mov	r1, r3
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <MX_GPIO_Init+0xb8>)
 800131a:	f000 fac3 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_Pin LA_Pin LG_Pin PR_Pin
                           PA_Pin PG_Pin P1_Pin P2_Pin
                           L1_Pin L2_Pin */
  GPIO_InitStruct.Pin = LR_Pin|LA_Pin|LG_Pin|PR_Pin
 800131e:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8001322:	60bb      	str	r3, [r7, #8]
                          |PA_Pin|PG_Pin|P1_Pin|P2_Pin
                          |L1_Pin|L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2302      	movs	r3, #2
 800132e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0xb8>)
 8001338:	f000 fab4 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800133c:	237f      	movs	r3, #127	; 0x7f
 800133e:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2302      	movs	r3, #2
 800134a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_GPIO_Init+0xbc>)
 8001354:	f000 faa6 	bl	80018a4 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800
 8001368:	40010c00 	.word	0x40010c00

0800136c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	timerRun();
 8001374:	f000 f842 	bl	80013fc <timerRun>
	getKeyInput();
 8001378:	f7fe ff12 	bl	80001a0 <getKeyInput>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <setTimer>:
// Khoi tao cac mang timer_counter va timer_flag voi so luong phan tu moi mang bang NUM_OF_TIMERS
int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

// setTimer (index: Timer duoc xet toi; duration: Thoi gian setTimer (don vi: ms))
void setTimer(int index, int duration) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <setTimer+0x30>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <setTimer+0x34>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <setTimer+0x38>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2100      	movs	r1, #0
 80013b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000110 	.word	0x20000110
 80013c4:	200000a8 	.word	0x200000a8
 80013c8:	200000b8 	.word	0x200000b8

080013cc <clearTimer>:

// clearTimer (timer_flag[index] = 0, timer_counter[index] = 0)
void clearTimer(int index) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <clearTimer+0x28>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2100      	movs	r1, #0
 80013da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <clearTimer+0x2c>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2100      	movs	r1, #0
 80013e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200000a8 	.word	0x200000a8
 80013f8:	200000b8 	.word	0x200000b8

080013fc <timerRun>:

// timerRun
void timerRun(){
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
	// Dung vong lap "for" de xet doi voi tung Timer
	// Voi moi Timer, so chu ki timer_counter se dem nguoc, neu timer_counter == 0 thi timer da dem nguoc ve 0, khi do timer_flag se bao gia tri bang 1
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	e01c      	b.n	8001442 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <timerRun+0x58>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dd13      	ble.n	800143c <timerRun+0x40>
			timer_counter[i]--;
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <timerRun+0x58>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <timerRun+0x58>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <timerRun+0x58>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dc04      	bgt.n	800143c <timerRun+0x40>
				timer_flag[i] = 1;
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <timerRun+0x5c>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2101      	movs	r1, #1
 8001438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b03      	cmp	r3, #3
 8001446:	dddf      	ble.n	8001408 <timerRun+0xc>
			}
		}
	}
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200000a8 	.word	0x200000a8
 8001458:	200000b8 	.word	0x200000b8

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_MspInit+0x5c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_MspInit+0x5c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_MspInit+0x5c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_MspInit+0x5c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_MspInit+0x60>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_MspInit+0x60>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d0:	d113      	bne.n	80014fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201c      	movs	r0, #28
 80014f0:	f000 f9a1 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f4:	201c      	movs	r0, #28
 80014f6:	f000 f9ba 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154e:	f000 f87f 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM2_IRQHandler+0x10>)
 800155e:	f000 ffdb 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000c8 	.word	0x200000c8

0800156c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001578:	f7ff fff8 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001594:	4c09      	ldr	r4, [pc, #36]	; (80015bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f001 fb05 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a6:	f7ff fde7 	bl	8001178 <main>
  bx lr
 80015aa:	4770      	bx	lr
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015b4:	08002c58 	.word	0x08002c58
  ldr r2, =_sbss
 80015b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015bc:	20000118 	.word	0x20000118

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_Init+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_Init+0x28>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f923 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	200f      	movs	r0, #15
 80015dc:	f000 f808 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff ff3c 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f93b 	bl	800188a <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 f903 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000054 	.word	0x20000054
 8001648:	2000005c 	.word	0x2000005c
 800164c:	20000058 	.word	0x20000058

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x1c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_IncTick+0x20>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <HAL_IncTick+0x20>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	2000005c 	.word	0x2000005c
 8001670:	20000114 	.word	0x20000114

08001674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_GetTick+0x10>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000114 	.word	0x20000114

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <__NVIC_EnableIRQ+0x34>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff90 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff2d 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff42 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff35 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b08b      	sub	sp, #44	; 0x2c
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e148      	b.n	8001b4a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b8:	2201      	movs	r2, #1
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8137 	bne.w	8001b44 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4aa3      	ldr	r2, [pc, #652]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d05e      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018e0:	4aa1      	ldr	r2, [pc, #644]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d875      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018e6:	4aa1      	ldr	r2, [pc, #644]	; (8001b6c <HAL_GPIO_Init+0x2c8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d058      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018ec:	4a9f      	ldr	r2, [pc, #636]	; (8001b6c <HAL_GPIO_Init+0x2c8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d86f      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018f2:	4a9f      	ldr	r2, [pc, #636]	; (8001b70 <HAL_GPIO_Init+0x2cc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d052      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018f8:	4a9d      	ldr	r2, [pc, #628]	; (8001b70 <HAL_GPIO_Init+0x2cc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d869      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018fe:	4a9d      	ldr	r2, [pc, #628]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d04c      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001904:	4a9b      	ldr	r2, [pc, #620]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d863      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800190a:	4a9b      	ldr	r2, [pc, #620]	; (8001b78 <HAL_GPIO_Init+0x2d4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d046      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001910:	4a99      	ldr	r2, [pc, #612]	; (8001b78 <HAL_GPIO_Init+0x2d4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d85d      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 8001916:	2b12      	cmp	r3, #18
 8001918:	d82a      	bhi.n	8001970 <HAL_GPIO_Init+0xcc>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d859      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_GPIO_Init+0x80>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	0800199f 	.word	0x0800199f
 8001928:	08001979 	.word	0x08001979
 800192c:	0800198b 	.word	0x0800198b
 8001930:	080019cd 	.word	0x080019cd
 8001934:	080019d3 	.word	0x080019d3
 8001938:	080019d3 	.word	0x080019d3
 800193c:	080019d3 	.word	0x080019d3
 8001940:	080019d3 	.word	0x080019d3
 8001944:	080019d3 	.word	0x080019d3
 8001948:	080019d3 	.word	0x080019d3
 800194c:	080019d3 	.word	0x080019d3
 8001950:	080019d3 	.word	0x080019d3
 8001954:	080019d3 	.word	0x080019d3
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019d3 	.word	0x080019d3
 8001960:	080019d3 	.word	0x080019d3
 8001964:	080019d3 	.word	0x080019d3
 8001968:	08001981 	.word	0x08001981
 800196c:	08001995 	.word	0x08001995
 8001970:	4a82      	ldr	r2, [pc, #520]	; (8001b7c <HAL_GPIO_Init+0x2d8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001976:	e02c      	b.n	80019d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e029      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e024      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	3308      	adds	r3, #8
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e01f      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	330c      	adds	r3, #12
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e01a      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a6:	2304      	movs	r3, #4
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e013      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	611a      	str	r2, [r3, #16]
          break;
 80019be:	e009      	b.n	80019d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c0:	2308      	movs	r3, #8
 80019c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	615a      	str	r2, [r3, #20]
          break;
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          break;
 80019d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d801      	bhi.n	80019de <HAL_GPIO_Init+0x13a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_Init+0x13e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3304      	adds	r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2bff      	cmp	r3, #255	; 0xff
 80019e8:	d802      	bhi.n	80019f0 <HAL_GPIO_Init+0x14c>
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x152>
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3b08      	subs	r3, #8
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	210f      	movs	r1, #15
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8090 	beq.w	8001b44 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x2dc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a55      	ldr	r2, [pc, #340]	; (8001b80 <HAL_GPIO_Init+0x2dc>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_GPIO_Init+0x2dc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a3c:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_GPIO_Init+0x2e0>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x2e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1dc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_GPIO_Init+0x2ec>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1d8>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e004      	b.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a84:	2300      	movs	r3, #0
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	f002 0203 	and.w	r2, r2, #3
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a96:	493b      	ldr	r1, [pc, #236]	; (8001b84 <HAL_GPIO_Init+0x2e0>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4937      	ldr	r1, [pc, #220]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001abe:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4933      	ldr	r1, [pc, #204]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	492d      	ldr	r1, [pc, #180]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4929      	ldr	r1, [pc, #164]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4923      	ldr	r1, [pc, #140]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	491f      	ldr	r1, [pc, #124]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4919      	ldr	r1, [pc, #100]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4915      	ldr	r1, [pc, #84]	; (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	3301      	adds	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f aeaf 	bne.w	80018b8 <HAL_GPIO_Init+0x14>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	372c      	adds	r7, #44	; 0x2c
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	10320000 	.word	0x10320000
 8001b6c:	10310000 	.word	0x10310000
 8001b70:	10220000 	.word	0x10220000
 8001b74:	10210000 	.word	0x10210000
 8001b78:	10120000 	.word	0x10120000
 8001b7c:	10110000 	.word	0x10110000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	40011000 	.word	0x40011000
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	807b      	strh	r3, [r7, #2]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd6:	787b      	ldrb	r3, [r7, #1]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bdc:	887a      	ldrh	r2, [r7, #2]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be2:	e003      	b.n	8001bec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	041a      	lsls	r2, r3, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	611a      	str	r2, [r3, #16]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c08:	887a      	ldrh	r2, [r7, #2]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	041a      	lsls	r2, r3, #16
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	400b      	ands	r3, r1
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	611a      	str	r2, [r3, #16]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e26c      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d06c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x12c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d168      	bne.n	8001d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e246      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x76>
 8001c90:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a7f      	ldr	r2, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7a      	ldr	r2, [pc, #488]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xbc>
 8001cca:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001ce4:	4b6b      	ldr	r3, [pc, #428]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6a      	ldr	r2, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a67      	ldr	r2, [pc, #412]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fcb6 	bl	8001674 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fcb2 	bl	8001674 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1fa      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe4>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fca2 	bl	8001674 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fc9e 	bl	8001674 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1e6      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x10c>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e1ba      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4939      	ldr	r1, [pc, #228]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e03a      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fc57 	bl	8001674 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fc53 	bl	8001674 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e19b      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4927      	ldr	r1, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc36 	bl	8001674 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fc32 	bl	8001674 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e17a      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d03a      	beq.n	8001eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d019      	beq.n	8001e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fc16 	bl	8001674 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fc12 	bl	8001674 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e15a      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 fa9a 	bl	80023a4 <RCC_Delay>
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7ff fbfc 	bl	8001674 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7ff fbf8 	bl	8001674 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d908      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e140      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	42420000 	.word	0x42420000
 8001e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b9e      	ldr	r3, [pc, #632]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e9      	bne.n	8001e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a6 	beq.w	8002006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b97      	ldr	r3, [pc, #604]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b94      	ldr	r3, [pc, #592]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a93      	ldr	r2, [pc, #588]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b91      	ldr	r3, [pc, #580]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b8b      	ldr	r3, [pc, #556]	; (8002120 <HAL_RCC_OscConfig+0x4f8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a8a      	ldr	r2, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fbb9 	bl	8001674 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff fbb5 	bl	8001674 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0fd      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x4f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x312>
 8001f2c:	4b7b      	ldr	r3, [pc, #492]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a7a      	ldr	r2, [pc, #488]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e02d      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x334>
 8001f42:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a75      	ldr	r2, [pc, #468]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a72      	ldr	r2, [pc, #456]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	e01c      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x356>
 8001f64:	4b6d      	ldr	r3, [pc, #436]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a6c      	ldr	r2, [pc, #432]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	4b6a      	ldr	r3, [pc, #424]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a69      	ldr	r2, [pc, #420]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f7e:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a66      	ldr	r2, [pc, #408]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	4b64      	ldr	r3, [pc, #400]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a63      	ldr	r2, [pc, #396]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d015      	beq.n	8001fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fb69 	bl	8001674 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff fb65 	bl	8001674 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0ab      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x37e>
 8001fc8:	e014      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fb53 	bl	8001674 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fb4f 	bl	8001674 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e095      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b4c      	ldr	r3, [pc, #304]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8081 	beq.w	8002112 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d061      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d146      	bne.n	80020b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_OscConfig+0x4fc>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fb23 	bl	8001674 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fb1f 	bl	8001674 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e067      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	492d      	ldr	r1, [pc, #180]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a19      	ldr	r1, [r3, #32]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	430b      	orrs	r3, r1
 800207e:	4927      	ldr	r1, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x4fc>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff faf3 	bl	8001674 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff faef 	bl	8001674 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e037      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x46a>
 80020b0:	e02f      	b.n	8002112 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_RCC_OscConfig+0x4fc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fadc 	bl	8001674 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fad8 	bl	8001674 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e020      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x498>
 80020de:	e018      	b.n	8002112 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e013      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
 8002124:	42420060 	.word	0x42420060

08002128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0d0      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d910      	bls.n	800216c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	4965      	ldr	r1, [pc, #404]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b8      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800218e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	494d      	ldr	r1, [pc, #308]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d040      	beq.n	8002248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d115      	bne.n	8002206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07f      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e073      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f6:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06b      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4936      	ldr	r1, [pc, #216]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002218:	f7ff fa2c 	bl	8001674 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	e00a      	b.n	8002236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7ff fa28 	bl	8001674 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e053      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 020c 	and.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d1eb      	bne.n	8002220 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d210      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4922      	ldr	r1, [pc, #136]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e032      	b.n	80022de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4916      	ldr	r1, [pc, #88]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022b6:	f000 f821 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	490a      	ldr	r1, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	5ccb      	ldrb	r3, [r1, r3]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_RCC_ClockConfig+0x1cc>)
 80022d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1d0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f98a 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08002c2c 	.word	0x08002c2c
 80022f4:	20000054 	.word	0x20000054
 80022f8:	20000058 	.word	0x20000058

080022fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_RCC_GetSysClockFreq+0x94>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d002      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x30>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d003      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x36>
 800232a:	e027      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_GetSysClockFreq+0x98>)
 800232e:	613b      	str	r3, [r7, #16]
      break;
 8002330:	e027      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_RCC_GetSysClockFreq+0x9c>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_GetSysClockFreq+0x94>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	0c5b      	lsrs	r3, r3, #17
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_RCC_GetSysClockFreq+0x98>)
 800235e:	fb02 f203 	mul.w	r2, r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e004      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	613b      	str	r3, [r7, #16]
      break;
 800237a:	e002      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetSysClockFreq+0x98>)
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002382:	693b      	ldr	r3, [r7, #16]
}
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	007a1200 	.word	0x007a1200
 8002398:	08002c3c 	.word	0x08002c3c
 800239c:	08002c4c 	.word	0x08002c4c
 80023a0:	003d0900 	.word	0x003d0900

080023a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <RCC_Delay+0x34>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <RCC_Delay+0x38>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0a5b      	lsrs	r3, r3, #9
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023c0:	bf00      	nop
  }
  while (Delay --);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	60fa      	str	r2, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f9      	bne.n	80023c0 <RCC_Delay+0x1c>
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000054 	.word	0x20000054
 80023dc:	10624dd3 	.word	0x10624dd3

080023e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e041      	b.n	8002476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff f85a 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f000 fa6e 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d001      	beq.n	8002498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e035      	b.n	8002504 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_TIM_Base_Start_IT+0x90>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_TIM_Base_Start_IT+0x4e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c2:	d004      	beq.n	80024ce <HAL_TIM_Base_Start_IT+0x4e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_TIM_Base_Start_IT+0x94>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d111      	bne.n	80024f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d010      	beq.n	8002502 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f0:	e007      	b.n	8002502 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40000400 	.word	0x40000400

08002518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d122      	bne.n	8002574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d11b      	bne.n	8002574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0202 	mvn.w	r2, #2
 8002544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9b4 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f9a7 	bl	80028b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9b6 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b04      	cmp	r3, #4
 800258e:	d11b      	bne.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0204 	mvn.w	r2, #4
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f98a 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f97d 	bl	80028b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f98c 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0208 	mvn.w	r2, #8
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2204      	movs	r2, #4
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f960 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f953 	bl	80028b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f962 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b10      	cmp	r3, #16
 8002628:	d122      	bne.n	8002670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b10      	cmp	r3, #16
 8002636:	d11b      	bne.n	8002670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0210 	mvn.w	r2, #16
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2208      	movs	r2, #8
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f936 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f929 	bl	80028b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f938 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10e      	bne.n	800269c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0201 	mvn.w	r2, #1
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fe68 	bl	800136c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa6b 	bl	8002b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d10e      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d107      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8fc 	bl	80028ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b20      	cmp	r3, #32
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0220 	mvn.w	r2, #32
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa36 	bl	8002b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIM_ConfigClockSource+0x1c>
 8002740:	2302      	movs	r3, #2
 8002742:	e0b4      	b.n	80028ae <HAL_TIM_ConfigClockSource+0x186>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277c:	d03e      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0xd4>
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	f200 8087 	bhi.w	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	f000 8086 	beq.w	800289a <HAL_TIM_ConfigClockSource+0x172>
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d87f      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b70      	cmp	r3, #112	; 0x70
 8002796:	d01a      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xa6>
 8002798:	2b70      	cmp	r3, #112	; 0x70
 800279a:	d87b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b60      	cmp	r3, #96	; 0x60
 800279e:	d050      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x11a>
 80027a0:	2b60      	cmp	r3, #96	; 0x60
 80027a2:	d877      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b50      	cmp	r3, #80	; 0x50
 80027a6:	d03c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xfa>
 80027a8:	2b50      	cmp	r3, #80	; 0x50
 80027aa:	d873      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d058      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x13a>
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d86f      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d064      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b30      	cmp	r3, #48	; 0x30
 80027ba:	d86b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d060      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d867      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d05c      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d05a      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027cc:	e062      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f000 f95e 	bl	8002a9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	609a      	str	r2, [r3, #8]
      break;
 80027fa:	e04f      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f000 f947 	bl	8002a9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281e:	609a      	str	r2, [r3, #8]
      break;
 8002820:	e03c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f000 f8be 	bl	80029b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2150      	movs	r1, #80	; 0x50
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f915 	bl	8002a6a <TIM_ITRx_SetConfig>
      break;
 8002840:	e02c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f000 f8dc 	bl	8002a0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2160      	movs	r1, #96	; 0x60
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f905 	bl	8002a6a <TIM_ITRx_SetConfig>
      break;
 8002860:	e01c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	461a      	mov	r2, r3
 8002870:	f000 f89e 	bl	80029b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f8f5 	bl	8002a6a <TIM_ITRx_SetConfig>
      break;
 8002880:	e00c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f000 f8ec 	bl	8002a6a <TIM_ITRx_SetConfig>
      break;
 8002892:	e003      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e000      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800289a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <TIM_Base_SetConfig+0xa8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x28>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x28>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a22      	ldr	r2, [pc, #136]	; (80029ac <TIM_Base_SetConfig+0xac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <TIM_Base_SetConfig+0xa8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <TIM_Base_SetConfig+0xac>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <TIM_Base_SetConfig+0xa8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400

080029b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0201 	bic.w	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 030a 	bic.w	r3, r3, #10
 80029ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f023 0210 	bic.w	r2, r3, #16
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	031b      	lsls	r3, r3, #12
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f043 0307 	orr.w	r3, r3, #7
 8002a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b087      	sub	sp, #28
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	021a      	lsls	r2, r3, #8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e041      	b.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d004      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10c      	bne.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400

08002b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	4d0c      	ldr	r5, [pc, #48]	; (8002be8 <__libc_init_array+0x38>)
 8002bb6:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb8:	1b64      	subs	r4, r4, r5
 8002bba:	10a4      	asrs	r4, r4, #2
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	f000 f822 	bl	8002c08 <_init>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	4d0a      	ldr	r5, [pc, #40]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	; (8002bf4 <__libc_init_array+0x44>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08002c50 	.word	0x08002c50
 8002bec:	08002c50 	.word	0x08002c50
 8002bf0:	08002c50 	.word	0x08002c50
 8002bf4:	08002c54 	.word	0x08002c54

08002bf8 <memset>:
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4402      	add	r2, r0
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	f803 1b01 	strb.w	r1, [r3], #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
